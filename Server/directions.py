import json
import urllib.request
import math
import numpy as np
import timeit
# import numpy.linalg as np.linalg
"""
API Documentation
https://developers.google.com/maps/documentation/directions/get-directions
"""
class Path:
    '''
    The path class generates the path taken by the user based on the polyline retrived from the Google Maps API
    The path is split up to only contain straight paths, a box is created around these subpaths using the CoordBox subclass
    The sub-class CoordBox is used to test whether a set point is on route
        Coordbox is a basic box around each subpath along the route, extended by the tolerance
        i.e the minpoint will be offset by 5 meters (tolerance = 10 / 2)
        to test if on route, coordbox checks if within the box it generates
            if within the box, uses euclids alg to find distance between line generated by route points and users position
                not just using euclids alg as it doesnt seem to care if the line isnt infinite and will say a point is < 1m away even if its 100km away
            if euclids says w/in distance, return True else returns False

    '''
    def __init__(self,polyline=[''],tolerance=10):
        '''
        Path Class, used to determine whether the user is on the route or not
        :param polyline: array containing googlemaps API polyline of the route
        :param tolerance: how far we are allowing the user to go off route before telling them
        '''
        # storing the polyline incase needed later (may remove)
        self.polyline = polyline

        # converting tolerance to coordinate distance (lat/long) from meters

        self.tolerance = tolerance * 0.000009009
        # coordBoxes contains all the coordBox objects
        self.coordBoxes = []
        #converting polyline into lat/long coordinates
        coords = self.polylineToLinearCoords(self.polyline)
        #creating the coordBoxes
        for i in range(len(coords)-1):
            self.coordBoxes.append(self.CoordBox(coords[i],coords[i+1],self.tolerance))


    def onRoute(self,pos):
        '''
        onRoute will determine whether the user is still following their given route
        :param pos: users location
        :return: Boolean
        '''
        # primitave check, iterating through each coordBox, and checking if the user is in the box
        #   -Change to lib(?) for faster lookup
        for box in self.coordBoxes:
            if box.inBox(pos):
                return True
        return False

    def polylineToLinearCoords(self,polys):
        '''
        polylineToLinearCoords converts array of polylines into single array containing lat/long coordinates of route
        :param polys: array containing googlemaps API polyline of the route
        :return: array containing lat/long coordinates of each minor point of the route
        '''
        coords = []
        #decoding poly lines into coordinates
        for poly in polys:
            coords.append(self.decodePolyline(poly))
        #flattening coordinates into a single array
        flatCoords = []
        for subcord in coords:
            for c in subcord:
                if not (c in flatCoords):
                    flatCoords.append(c)
        return flatCoords

    def decodePolyline(self,poly='', precision=5):
        """
        Function is taken from https://github.com/mapbox/polyline/blob/master/src/polyline.js and Ive translated it to python
        I dont understand what its doing but it is working, and tested by plotting the points it returns giving the exact same route
        """
        index = 0
        lat = 0
        lng = 0
        coordinates = []
        shift = 0
        result = 0
        byte = None
        latitude_change = None
        longitude_change = None
        factor = math.pow(10, precision)

        while index < len(poly):
            byte = 0
            shift = 0
            result = 0
            firstLoop = True
            while byte >= 0x20 or firstLoop:
                firstLoop = False
                byte = ord(poly[index]) - 63
                index += 1
                result |= (byte & 0x1f) << shift
                shift += 5

            if (result & 1):
                latitude_change = ~(result >> 1)
            else:
                latitude_change = (result >> 1)

            shift = 0
            result = 0

            firstLoop = True
            while firstLoop or byte >= 0x20:
                firstLoop = False
                byte = ord(poly[index]) - 63
                index += 1
                result |= (byte & 0x1f) << shift
                shift += 5

            if (result & 1):
                longitude_change = ~(result >> 1)
            else:
                longitude_change = (result >> 1)

            lat += latitude_change
            lng += longitude_change

            coordinates.append([lat / factor, lng / factor])

        return coordinates


    class CoordBox:
        '''
        Coordbox is just a box spanning 2 points extended by the input tolerance
        Used to check whether a position is on route, and storing as a class is considerably faster than calculating it each time
        '''
        def __init__(self,pos1,pos2,tolerance):
            #creating the box,
            # "bottom left" of the box = [minX,minY]
            # "top right" of the box = [maxX,maxY]
            # tolerance is added/subtracted to allow being slightly off route
            if pos1[0] < pos2[0]:
                self.maxX = pos2[0]
                self.minX = pos1[0]
            else:
                self.minX = pos2[0]
                self.maxX = pos1[0]
            if pos1[1] < pos2[1]:
                self.maxY = pos2[1]
                self.minY = pos1[1]
            else:
                self.minY = pos2[1]
                self.maxY = pos1[1]
            self.minY -= tolerance/2
            self.minX -= tolerance/2
            self.maxY += tolerance/2
            self.maxX += tolerance/2
            #storing exact points and tolerance for euclids alg used in inBox
            self.p1 = np.array(pos1)
            self.p2 = np.array(pos2)
            self.tolerance = tolerance

        def inBox(self,pos):
            """
            inBox will determine whether the users position is within tolerance of the route
                by default it will check if the user is within 10m of the road
            :param pos: users lat long coordinates
            :return:
            """
            # if within the box
            if self.minX < pos[0] and self.minY < pos[1] and self.maxX > pos[0] and self.maxY > pos[1]:
                # Euclids algorithm
                # checking if within tolerance range
                #  not just using euclids alg as it doesnt seem to care if the line isnt infinite and will say a point is < 1m away even if its 100km away
                if np.cross(self.p2 - self.p1, pos - self.p1) / np.linalg.norm(self.p2 - self.p1) <= self.tolerance:
                    return True
            return False

def getDirectionsDemo():
    """startLocation = "Disneyland"
    endLoaction = "Universal Studios Hollywood"
    """

    f = open("routeTest.json")
    t = json.load(f)
    estimatedDistance = t['routes'][0]['legs'][0]['distance']['value']/1000
    # estimated emissions: g/CO2 * CO2 = g
    estimatedEmissions = emissions*estimatedDistance
    polyLine = []
    for d in t['routes'][0]['legs'][0]['steps']:
        polyLine.append(d['polyline']['points'])

    return (t,polyLine,estimatedDistance)


def getDirections(data=json.dumps({"start" : [0,0], "end" : [0,0]}),debug=False):
    # pull info out of data request
    d = json.loads(data)
    start = str(d["start"][0])+' '+str(d["start"][1])
    end = str(d["end"][0])+','+str(d["end"][1])
    key = None
    if not key:
        try:
            f = open("key.api")
            for line in f:
                key = line.rstrip()
        except:
            key = ""
            return ("No API key",None,None,False)
    try:
        with urllib.request.urlopen("https://maps.googleapis.com/maps/api/directions/json?origin="+start+"&destination="+end+"&key="+key) as url:
            url_data = json.loads(url.read().decode())
    except:
        return ("Incorrect API key", None, None, False)

    if debug:
        print(url_data)
    estimatedDistance = t['routes'][0]['legs'][0]['distance']['value'] / 1000
    polyLine = []
    for d in t['routes'][0]['legs'][0]['steps']:
        polyLine.append(d['polyline']['points'])

    return (t, polyLine, estimatedDistance, True)



if __name__ == "__main__":
    """test data"""
    onRouteLoc1 = [33.8161014800008, -117.9225146125875]
    onRouteLoc2 = [33.82157343203593, -117.92277292780344]
    offRouteLoc = [33.8353080852262, -117.92214664830355]
    0.000009009

    '''test car information
        vehicle =  ("Toyota, Yarris, 2013")
    '''
    emissions = 165  # Co2 g/km

    testRoute = [[33.8161014800008, -117.9225146125875], [33.82157343203593, -117.92277292780344], [33.8353080852262, -117.92214664830355],[33.8821008,-118.0249616],[33.8155166,-117.9238358],[33.8215783,-117.9226437]]
    """ end test data"""
    (t, polyLine, estimatedDistance, keyCheck) = getDirections(debug=True)
    if keyCheck:
        estimatedEmissions = estimatedDistance*emissions
        # estimated emissions: g/CO2 * CO2 = g
        r = Path(polyLine)
        for p in testRoute:
            print(r.onRoute(p))
    ''' should print
True
True
False
True
False
False
    '''